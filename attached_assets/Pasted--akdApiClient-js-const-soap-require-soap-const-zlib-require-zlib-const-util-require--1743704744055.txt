// akdApiClient.js
const soap = require('soap');
const zlib = require('zlib');
const util = require('util'); // For promisify

// Promisify zlib functions for async/await usage
const gunzipAsync = util.promisify(zlib.gunzip);

// ============================
// Configuration (Use Environment Variables ideally)
// ============================
const HTTP_USERNAME = process.env.AKD_USERNAME || "myservice"; // Replace or use env var
const HTTP_PASSWORD = process.env.AKD_PASSWORD || "12345678"; // Replace or use env var
const WSDL_URL = process.env.AKD_WSDL_URL || "http://online.akdtrade.biz/TradeCastService/LoginServerService?wsdl";
// const WSDL_URL = "http://online2.maksltrade.biz/TradeCastService/LoginServerService?wsdl"; // Alternative

// Use fixed dates based on the example JSON for consistency during development/testing
const COMMON_START_DATE = "Mar 01, 2025";
const COMMON_END_DATE = "Mar 12, 2025";

// Default values/placeholders mirroring Python script's assumptions
const DEFAULT_TRADING_ACCOUNT_STATUS = "Active";
const DEFAULT_TRADING_ACCOUNT_TYPE_CASH = "Cash";
const DEFAULT_TRADING_ACCOUNT_TYPE_MARGIN = "Margin";
const DEFAULT_ORDER_TYPE = "Limit";
const DEFAULT_MARGIN_CALL_LEVEL = "70%";
const DEFAULT_CURRENT_MARGIN_USAGE = "23.4%";
const DEFAULT_ACCOUNT_FALLBACK = "COAF3906"; // Fallback if TradAccounts fails


// ============================
// Helper Functions
// ============================

/**
 * Processes the raw SOAP response, handling potential Buffers, Gzip, and Base64.
 * Mimics Python's process_response and unzip_string_from_bytes_custom.
 */
async function processAndUnzipResponse(resp) {
    if (resp === null || resp === undefined) {
        return null;
    }

    let bufferToDecompress;

    try {
        if (Buffer.isBuffer(resp)) {
            // Check for Gzip magic number
            if (resp[0] === 0x1f && resp[1] === 0x8b) {
                bufferToDecompress = resp;
            } else {
                // If it's a buffer but not gzipped, try decoding as UTF-8
                return resp.toString('utf-8');
            }
        } else if (typeof resp === 'string') {
            // Assume Base64 encoded Gzipped data if it's a string
            const decodedBuffer = Buffer.from(resp, 'base64');
            // Check magic number after decoding
            if (decodedBuffer[0] === 0x1f && decodedBuffer[1] === 0x8b) {
                bufferToDecompress = decodedBuffer;
            } else {
                 // If not gzipped after base64 decode, return the original string? Or decoded?
                 // Let's return the decoded buffer as string for consistency.
                 return decodedBuffer.toString('utf-8');
            }
        } else {
            // If it's neither Buffer nor string, return as is (might be simple type like bool)
            return resp;
        }

        // Decompress if we identified gzipped data
        if (bufferToDecompress) {
            const decompressed = await gunzipAsync(bufferToDecompress);
            return decompressed.toString('utf-8');
        }
    } catch (error) {
        console.error(`Error during response processing/decompression: ${error.message}`);
        // Try returning the raw input as a string in case of error
        return String(resp);
    }
     // Should not reach here normally, but return raw if logic fails
    return String(resp);
}


/**
 * Parses the common '|' and ';' separated string into headers and data.
 */
function parseApiResponse(responseStr) {
    const result = { headers: [], data: [] };
    if (!responseStr || typeof responseStr !== 'string' || !responseStr.trim() || /no record|no data/i.test(responseStr)) {
        return result;
    }

    try {
        const rows = responseStr.trim().split('|').map(r => r.trim()).filter(r => r);
        if (!rows.length) {
            return result;
        }

        // Assume first row is headers if more than one row
        if (rows.length > 1) {
            result.headers = rows[0].split(';').map(h => h.trim());
            result.data = rows.slice(1).map(rowStr => {
                const cols = rowStr.split(';').map(c => c.trim());
                // Pad/Truncate cols to match header length
                const headerCount = result.headers.length;
                if (cols.length < headerCount) {
                    return cols.concat(Array(headerCount - cols.length).fill(""));
                }
                return cols.slice(0, headerCount);
            });
        } else {
            // Only one row, treat as data with generic headers
             const cols = rows[0].split(';').map(c => c.trim());
             result.headers = cols.map((_, i) => `Col${i + 1}`);
             result.data.push(cols);
        }
        return result;
    } catch (error) {
        console.error(`Error parsing API response string: ${error.message}\nRaw response: ${responseStr}`);
        return { headers: [], data: [] }; // Return empty on error
    }
}

/**
 * Formats a number string into PKR currency format.
 * Note: Intl may format slightly differently than Python's manual comma insertion.
 */
function formatPkr(valueStr) {
    try {
        const cleanedStr = String(valueStr).replace(/[^\d.-]/g, ''); // Allow digits, dot, hyphen
        const num = parseFloat(cleanedStr);
        if (isNaN(num)) return String(valueStr); // Return original if not a number

        // Using Intl.NumberFormat for potentially better localization, but may differ from Python's simple comma logic
        // return new Intl.NumberFormat('en-PK', { style: 'currency', currency: 'PKR', minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(num);
        // Manual formatting to closely match Python example:
        const formattedNum = num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return `PKR ${formattedNum}`;

    } catch (error) {
        return String(valueStr); // Fallback
    }
}

/** Formats number string as signed PKR, e.g., +PKR 100.00 */
function formatPkrSigned(valueStr) {
     try {
        const cleanedStr = String(valueStr).replace(/[^\d.-]/g, '');
        const num = parseFloat(cleanedStr);
        if (isNaN(num)) return String(valueStr);

        const sign = num >= 0 ? "+" : ""; // Add '+' for non-negative
        // Manual formatting:
        const formattedNum = Math.abs(num).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return `${sign}PKR ${formattedNum}`;
     } catch (error) {
         return String(valueStr); // Fallback
     }
}


/** Parses common date formats ('Mar 01, 2025', 'YYYY-MM-DD') to 'YYYY-MM-DD'. */
function parseDateFlexible(dateStr) {
    if (!dateStr || typeof dateStr !== 'string') return "";
    try {
        const date = new Date(dateStr.trim());
        // Check if the date is valid
        if (isNaN(date.getTime())) {
            // Add more specific parsing attempts if needed for other formats
            return dateStr; // Return original if invalid
        }
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    } catch (error) {
        return dateStr; // Return original on error
    }
}


// ============================
// Data Fetching Functions
// ============================

async function getTradingAccounts(client, userId) {
    const targetHeaders = ["Account", "Name", "Status", "Type", "Balance"];
    let primaryAccount = DEFAULT_ACCOUNT_FALLBACK; // Default if API fails
    const sampleData = [ // Fallback data
        ["COAF3906", "Jawad Foqan", "Active", "Cash", "PKR 587,210.45"],
        ["COAF3907", "Jawad Foqan", "Active", "Margin", "PKR 123,456.78"]
    ];

    try {
        // The `soap` library often returns results nested, e.g., { TradAccountsResult: '...' }
        // Adjust '.TradAccountsResult' based on actual WSDL/response structure if different
        const result = await client.TradAccountsAsync({ userName: userId });
        const rawResponse = result[0]?.TradAccountsResult ?? result[0] ?? null; // Access the actual response string/buffer
        const processed = await processAndUnzipResponse(rawResponse);
        const parsed = parseApiResponse(processed);
        const dataOut = [];

        const accountColIdx = 0;
        const nameColIdx = 1;

        for (const row of parsed.data) {
            const account = row[accountColIdx] ?? "";
            const name = row[nameColIdx] ?? "";
            const status = DEFAULT_TRADING_ACCOUNT_STATUS;
            // Simple logic based on example output - adjust if API provides type
            const accType = dataOut.length === 0 ? DEFAULT_TRADING_ACCOUNT_TYPE_CASH : DEFAULT_TRADING_ACCOUNT_TYPE_MARGIN;
            let balance = "PKR ?"; // Placeholder

            // Match example balances (since API doesn't seem to provide it here)
            if (account === "COAF3906") balance = "PKR 587,210.45";
            else if (account === "COAF3907") balance = "PKR 123,456.78";

             dataOut.push([account, name, status, accType, balance]);
        }

         // If API returned data, use the first account found
        if (dataOut.length > 0 && dataOut[0][0]) {
             primaryAccount = dataOut[0][0];
             console.log(`Trading Accounts fetched successfully for ${userId}. Primary Account: ${primaryAccount}`);
             return { result: { headers: targetHeaders, data: dataOut }, primaryAccount: primaryAccount };
         } else {
            // If API parsing resulted in empty data, use fallback
            console.warn(`No valid trading accounts parsed for ${userId}. Using sample data.`);
             primaryAccount = sampleData[0][0]; // Use fallback account
            return { result: { headers: targetHeaders, data: sampleData }, primaryAccount: primaryAccount };
         }

    } catch (error) {
        console.error(`Error fetching/parsing Trading Accounts for ${userId}: ${error.message}. Using sample data.`);
        primaryAccount = sampleData[0][0]; // Use fallback account on error
        return { result: { headers: targetHeaders, data: sampleData }, primaryAccount: primaryAccount };
    }
}

async function getOrderHistory(client, userId, accountNo, startDate, endDate) {
    const targetHeaders = ["Order ID", "Symbol", "Side", "Type", "Quantity", "Price", "Status", "Date"];
    const sampleData = [
        ["ORD001", "MARI", "Buy", "Limit", "100", "PKR 1,234.56", "Completed", "2025-03-01"],
        ["ORD002", "ENGRO", "Sell", "Market", "50", "PKR 987.65", "Completed", "2025-03-02"],
        ["ORD003", "LUCK", "Buy", "Limit", "75", "PKR 567.89", "Rejected", "2025-03-03"]
    ];

    try {
        const params = {
            trader: userId,
            accountNo: accountNo,
            pincode: "",
            scrip: "ALL",
            type: "ALL",
            startDate: startDate,
            endDate: endDate,
            'from': "OrderHistory" // Handle reserved keyword 'from'
        };
        const result = await client.GetOrderHistoryAsync(params);
        // Adjust '.GetOrderHistoryResult' based on actual WSDL/response structure
        const rawResponse = result[0]?.GetOrderHistoryResult ?? result[0] ?? null;
        const txt = await processAndUnzipResponse(rawResponse); // Uses the custom unzip logic
        const dataOut = [];

        // Manual parsing based on Python script's observation (no clear headers in raw)
        const rows = typeof txt === 'string' ? txt.trim().split('|').map(r => r.trim()).filter(r => r) : [];

        // Assumed indices based on Python code and target format
        const symbolIdx = 0, qtyIdx = 1, priceIdx = 2, sideIdx = 4, orderRefIdx = 5, dateIdx = 6, statusIdx = 8;

        rows.forEach((rowStr, i) => {
            const cols = rowStr.split(';').map(c => c.trim());
             // Basic check for enough columns based on assumptions
             if (cols.length > Math.max(symbolIdx, qtyIdx, priceIdx, sideIdx, orderRefIdx, dateIdx, statusIdx)) {
                const orderId = `ORD${String(i + 1).padStart(3, '0')}`; // Generate ID
                const symbol = cols[symbolIdx] ?? '';
                const side = (cols[sideIdx] ?? '').charAt(0).toUpperCase() + (cols[sideIdx] ?? '').slice(1).toLowerCase();
                const orderType = DEFAULT_ORDER_TYPE; // Placeholder
                const quantity = cols[qtyIdx] ?? '';
                const price = formatPkr(cols[priceIdx] ?? '');
                const rawStatus = (cols[statusIdx] ?? '').toLowerCase();
                let status = "Completed"; // Default assumption
                if (rawStatus === 'null' || rawStatus === '') status = "Unknown";
                // Match sample data for demo purposes
                if (i === 2 && rows.length > 2) status = "Rejected"; // Override for 3rd item if exists
                const date = parseDateFlexible(cols[dateIdx] ?? '');

                dataOut.push([orderId, symbol, side, orderType, quantity, price, status, date]);
            }
        });

        if (dataOut.length > 0) {
             console.log(`Order History fetched successfully for ${accountNo}.`);
             return { headers: targetHeaders, data: dataOut };
        } else {
             console.warn(`No valid order history parsed for ${accountNo}. Using sample data.`);
             return { headers: targetHeaders, data: sampleData };
        }

    } catch (error) {
        console.error(`Error fetching/parsing Order History for ${accountNo}: ${error.message}. Using sample data.`);
        return { headers: targetHeaders, data: sampleData };
    }
}

async function getAccountStatement(client, userId, accountNo, startDate, endDate) {
    const targetHeaders = ["Date", "Description", "Debit", "Credit", "Balance"];
    const sampleData = [
        ["2025-03-01", "Deposit", "", "PKR 100,000.00", "PKR 100,000.00"],
        ["2025-03-02", "Buy MARI x100", "PKR 123,456.00", "", "PKR -23,456.00"],
        ["2025-03-03", "Sell ENGRO x50", "", "PKR 49,382.50", "PKR 25,926.50"],
        ["2025-03-04", "Dividend MARI", "", "PKR 5,000.00", "PKR 30,926.50"]
    ];
    try {
         const params = {
            userName: userId,
            accountNo: accountNo,
            startDate: startDate,
            endDate: endDate,
            'from': "TradeCast"
        };
        const result = await client.GetAccountStatementAsync(params);
        const rawResponse = result[0]?.GetAccountStatementResult ?? result[0] ?? null;
        const processed = await processAndUnzipResponse(rawResponse);
        const parsed = parseApiResponse(processed);
        const dataOut = [];

        // Indices based on Python analysis
        const dateColIdx = 2, descColIdx = 3, debitColIdx = 4, creditColIdx = 5, balanceColIdx = 6;

        for (const row of parsed.data) {
            const description = (row[descColIdx] ?? '').toLowerCase();
            // Skip header/footer rows often present
            if (description.includes("opening balance") || description.includes("net balance")) {
                continue;
            }
            // Basic check for enough columns
            if (row.length > Math.max(dateColIdx, descColIdx, debitColIdx, creditColIdx, balanceColIdx)) {
                 const date = parseDateFlexible(row[dateColIdx] ?? '');
                 const desc = row[descColIdx] ?? ''; // Keep original case now
                 const debitVal = parseFloat(String(row[debitColIdx] ?? '0').replace(/[^\d.-]/g, '')) || 0;
                 const creditVal = parseFloat(String(row[creditColIdx] ?? '0').replace(/[^\d.-]/g, '')) || 0;
                 const debit = debitVal > 0 ? formatPkr(debitVal) : "";
                 const credit = creditVal > 0 ? formatPkr(creditVal) : "";
                 const balance = formatPkr(row[balanceColIdx] ?? '');

                 dataOut.push([date, desc, debit, credit, balance]);
            }
        }

         if (dataOut.length > 0) {
            console.log(`Account Statement fetched successfully for ${accountNo}.`);
             return { headers: targetHeaders, data: dataOut };
         } else {
             console.warn(`No valid account statement entries parsed for ${accountNo}. Using sample data.`);
             return { headers: targetHeaders, data: sampleData };
         }

    } catch (error) {
        console.error(`Error fetching/parsing Account Statement for ${accountNo}: ${error.message}. Using sample data.`);
        return { headers: targetHeaders, data: sampleData };
    }
}


async function getPortfolioHoldings(client, userId, accountNo) {
    const targetHeaders = ["Symbol", "Quantity", "Avg Price", "Current Price", "Market Value", "Profit/Loss"];
    const sampleData = [
        ["MARI", "100", "PKR 1,234.56", "PKR 1,345.67", "PKR 134,567.00", "+PKR 11,111.00 (9.0%)"],
        ["LUCK", "75", "PKR 567.89", "PKR 598.76", "PKR 44,907.00", "+PKR 2,315.25 (5.4%)"]
    ];

    try {
        const params = { UserID: userId, Account: accountNo }; // Note case sensitivity might matter
        const result = await client.GetCollateralAsync(params);
        const rawResponse = result[0]?.GetCollateralResult ?? result[0] ?? null;
        const processed = await processAndUnzipResponse(rawResponse);
        const parsed = parseApiResponse(processed);
        const dataOut = [];

        // Find header indices dynamically
        const headerMap = { symbol: -1, quantity: -1, avgBuyRate: -1, mtm: -1, mtmAmount: -1, unsettledPL: -1 };
        const apiHeaderMap = { // Map target keys to potential API header names
            symbol: "Symbol",
            quantity: "Quantity",
            avgBuyRate: "Avg. BUY RATE",
            mtm: "MTM", // Current Price
            mtmAmount: "MTM Amount", // Market Value
            unsettledPL: "UNSETTLED P/L" // Profit/Loss
        };

         if (parsed.headers.length > 0) {
            parsed.headers.forEach((h, i) => {
                for (const key in apiHeaderMap) {
                    if (apiHeaderMap[key] === h) {
                        headerMap[key] = i;
                        break;
                    }
                }
            });
        }

         // Check if essential headers were found
        if (Object.values(headerMap).some(idx => idx === -1)) {
             console.warn(`Could not find all necessary columns in GetCollateral response for ${accountNo}. Headers found: ${JSON.stringify(parsed.headers)}`);
             throw new Error("Missing essential columns in GetCollateral"); // Trigger fallback
         }

        for (const row of parsed.data) {
             // Ensure row has enough columns based on found indices
             if (row.length <= Math.max(...Object.values(headerMap))) continue;

             const symbol = row[headerMap.symbol] ?? '';
             const quantityStr = row[headerMap.quantity] ?? '0';
             const avgPriceStr = row[headerMap.avgBuyRate] ?? '0';
             const currPriceStr = row[headerMap.mtm] ?? '0';
             const marketValStr = row[headerMap.mtmAmount] ?? '0';
             const plStr = row[headerMap.unsettledPL] ?? '0';

             try {
                 const quantity = parseInt(parseFloat(quantityStr), 10);
                 const avgPrice = parseFloat(avgPriceStr);
                 const pl = parseFloat(plStr);
                 if (isNaN(quantity) || isNaN(avgPrice) || isNaN(pl)) continue; // Skip if parsing fails

                 const avgPriceFmt = formatPkr(avgPriceStr);
                 const currPriceFmt = formatPkr(currPriceStr);
                 const marketValFmt = formatPkr(marketValStr);

                 const costBasis = avgPrice * quantity;
                 const plPerc = costBasis !== 0 ? (pl / costBasis * 100) : 0.0;
                 const plFmt = `${formatPkrSigned(plStr)} (${plPerc.toFixed(1)}%)`;

                 dataOut.push([
                     symbol,
                     String(quantity), // Keep as string
                     avgPriceFmt,
                     currPriceFmt,
                     marketValFmt,
                     plFmt
                 ]);
             } catch (parseError) {
                 console.warn(`Skipping holdings row due to parsing error: ${parseError.message}`, row);
                 continue;
             }
        }

        if (dataOut.length > 0) {
            console.log(`Portfolio Holdings (GetCollateral) fetched successfully for ${accountNo}.`);
             return { headers: targetHeaders, data: dataOut };
         } else {
             console.warn(`No valid portfolio holdings parsed (GetCollateral) for ${accountNo}. Using sample data.`);
             // No specific error needed here, fallback happens below
             throw new Error("No data parsed from GetCollateral");
         }

    } catch (error) {
        console.error(`Error fetching/parsing Portfolio Holdings (GetCollateral) for ${accountNo}: ${error.message}. Using sample data.`);
        return { headers: targetHeaders, data: sampleData };
    }
}


async function getMarginDetails(client, userId, accountNo) {
    const targetHeaders = ["Particular", "Value"];
    // Fallback data mirroring the desired structure and Python's conclusion
    const sampleData = [
        ["Available Margin", "PKR 587,210.45"],
        ["Used Margin", "PKR 179,474.00"],
        ["Margin Call Level", DEFAULT_MARGIN_CALL_LEVEL],
        ["Current Margin Usage", DEFAULT_CURRENT_MARGIN_USAGE]
    ];

    try {
        // Attempt to get GetExposureDynamic - known to be complex and maybe not useful
        const params = { UserID: userId, account: accountNo, approved: "0" };
        const result = await client.GetExposureDynamicAsync(params);
        const rawResponse = result[0]?.GetExposureDynamicResult ?? result[0] ?? null;
        const processed = await processAndUnzipResponse(rawResponse);
        const parsed = parseApiResponse(processed);
        let availableMargin = null;

        // Very brittle attempt to find 'Available Amount' like in Python
        for (const row of parsed.data) {
            if (row.length > 1 && typeof row[0] === 'string' && row[0].includes("Available Amount")) {
                for (let i = 1; i < row.length; i++) {
                    const match = String(row[i]).match(/[\d,.-]+/); // Find numeric part
                    if (match) {
                        availableMargin = formatPkr(match[0]);
                        break; // Take first found
                    }
                }
                 if (availableMargin) break;
            }
        }

         // Even if we found availableMargin, the rest is missing from this API.
         // Stick to the sample data as per Python script's conclusion.
         console.warn(`Margin Details: GetExposureDynamic data for ${accountNo} is complex or incomplete for the target format. Using sample data.`);
        return { headers: targetHeaders, data: sampleData };

    } catch (error) {
        console.error(`Error fetching/parsing Margin Details (GetExposureDynamic) for ${accountNo}: ${error.message}. Using sample data.`);
        return { headers: targetHeaders, data: sampleData };
    }
}

// ============================
// Main Exported Function
// ============================

/**
 * Fetches all account details from AKD TradeCast SOAP API.
 * @param {Record<string, string>} credentials - Object containing username and password.
 * @returns {Promise<Record<string, any>>} - The structured account details object.
 */
async function getAKDAccountDetails(credentials) {
    if (!credentials || !credentials.username || !credentials.password) {
        throw new Error('Missing required credentials (username or password) for AKD');
    }

    const userId = credentials.username;
    console.log(`Attempting to fetch AKD details for user: ${userId}`);

    const clientOptions = {
        // Add any necessary SOAP client options here
        // Force http connection as needed for some servers:
        // request: requestModule.defaults({ rejectUnauthorized: false }) // If facing SSL issues with self-signed certs
    };

    let client;
    try {
        client = await soap.createClientAsync(WSDL_URL, clientOptions);

        // Add Basic HTTP Authentication to the client
        client.setSecurity(new soap.BasicAuthSecurity(HTTP_USERNAME, HTTP_PASSWORD));
        console.log("SOAP client created and authentication set.");

    } catch (error) {
        console.error(`Failed to create SOAP client or set security: ${error.message}`);
        throw new Error(`Failed to connect to AKD service: ${error.message}`);
    }

    try {
        // 1. Get Trading Accounts and primary account number
        const { result: tradingAccountsResult, primaryAccount } = await getTradingAccounts(client, userId);
        console.log(`Using account number: ${primaryAccount} for subsequent calls.`);

        // 2. Get Order History
        const orderHistoryResult = await getOrderHistory(client, userId, primaryAccount, COMMON_START_DATE, COMMON_END_DATE);

        // 3. Get Account Statement
        const accountStatementResult = await getAccountStatement(client, userId, primaryAccount, COMMON_START_DATE, COMMON_END_DATE);

        // 4. Get Portfolio Holdings
        const portfolioHoldingsResult = await getPortfolioHoldings(client, userId, primaryAccount);

        // 5. Get Margin Details
        const marginDetailsResult = await getMarginDetails(client, userId, primaryAccount);

        // Assemble the final JSON object
        const finalJsonOutput = {
            tradingAccounts: tradingAccountsResult,
            orderHistory: orderHistoryResult,
            accountStatement: accountStatementResult,
            portfolioHoldings: portfolioHoldingsResult,
            marginDetails: marginDetailsResult,
        };

        console.log(`Successfully fetched and processed all details for user: ${userId}`);
        return finalJsonOutput;

    } catch (error) {
        // Catch errors during the data fetching sequence
        console.error(`An error occurred during data fetching sequence for ${userId}: ${error.message}`);
        // Decide if you want to return partial data or throw
        // Throwing is cleaner to indicate failure.
        throw new Error(`Failed to fully retrieve AKD account details: ${error.message}`);
    }
}

module.exports = { getAKDAccountDetails }; // Export the main function

// ============================
// Example Usage (for testing)
// ============================
/*
async function runTest() {
    const testCredentials = {
        username: 'jawadfoq', // Use the username relevant to your test environment
        password: 'fakepassword123' // Use the correct password
        // Ensure AKD_USERNAME/AKD_PASSWORD env vars are set or replace above
    };

    try {
        console.log("\n--- Fetching AKD Details ---");
        const details = await getAKDAccountDetails(testCredentials);
        console.log("\n=== Final JSON Output ===");
        console.log(JSON.stringify(details, null, 2));
    } catch (error) {
        console.error("\n--- Test Failed ---");
        console.error(error);
    }
}

// Uncomment the line below to run the test when executing this file directly
// runTest();
*/